#include <iostream>
#include <sstream>
#include <algorithm>
#include <chrono>
#include <cmath>
#include <numeric>
#include <vector>
#include <fstream>
#include <conio.h>

std::string decHex(int, unsigned int);

int main() {
    std::cout << "uint8_t check size: " << sizeof(int8_t) << "\n";
    uint8_t encryptedMapData[0x200] = {
            0x15, 0xC8, 0x7B, 0x6B, 0x7F, 0xA1, 0xA3, 0x29, 0xE8, 0x81, 0x01, 0x99, 0x9F, 0xEB, 0xF2, 0x80,
            0x5F, 0xA3, 0x96, 0x7C, 0x17, 0xDB, 0xD2, 0x41, 0xA1, 0xBC, 0xBB, 0x13, 0xBC, 0xD8, 0xC3, 0x09,
            0xF4, 0x02, 0x1B, 0x95, 0xF3, 0x72, 0x65, 0xDB, 0x6F, 0x82, 0x9E, 0x52, 0xD9, 0x89, 0xD8, 0xDF,
            0x5A, 0xB0, 0x03, 0xF2, 0x9A, 0xE6, 0xEF, 0x81, 0x32, 0xA5, 0x57, 0x60, 0xE0, 0xC8, 0x2D, 0x8C,
            0x52, 0x63, 0x5D, 0xD8, 0x0F, 0x72, 0xDF, 0xA1, 0x36, 0x1C, 0x3E, 0xC8, 0xC2, 0x4F, 0x1E, 0xFD,
            0x1D, 0x11, 0x0C, 0x74, 0x13, 0x21, 0x49, 0xAD, 0xC0, 0xD9, 0xBA, 0xDA, 0x0D, 0xE4, 0x06, 0x8E,
            0x94, 0xE6, 0x25, 0x8B, 0xBA, 0xC2, 0x2B, 0x92, 0x0A, 0x90, 0xA1, 0x4A, 0x06, 0x53, 0x84, 0x79,
            0xE5, 0xE7, 0xCF, 0x60, 0x74, 0xD2, 0x3B, 0x2A, 0xE0, 0x56, 0x32, 0xA6, 0x10, 0x69, 0x52, 0x0F,
            0xD3, 0x3D, 0x7F, 0xF3, 0x12, 0x6D, 0x00, 0x57, 0x41, 0x3F, 0x96, 0x3B, 0x08, 0xB7, 0x48, 0x72,
            0xB2, 0x1E, 0x12, 0x57, 0x60, 0x95, 0x23, 0xC8, 0xAB, 0x52, 0xC8, 0x3F, 0xC4, 0xC0, 0x50, 0xC1,
            0xD3, 0x38, 0x28, 0x6E, 0x96, 0x6D, 0xDF, 0x8F, 0x41, 0x24, 0x21, 0x91, 0xF4, 0x64, 0x3E, 0xC9,
            0xE6, 0xC7, 0x45, 0x26, 0xA1, 0x4C, 0x0A, 0xD3, 0x2F, 0x8F, 0x77, 0x7D, 0x68, 0x86, 0x23, 0x43,
            0xCF, 0xBF, 0xE1, 0xF4, 0xC8, 0x9E, 0x35, 0x5A, 0x11, 0x26, 0xB7, 0x9F, 0x23, 0xCD, 0x68, 0xA2,
            0xB5, 0xCA, 0xD3, 0x53, 0x95, 0xDA, 0x0B, 0x87, 0x15, 0xCA, 0xE7, 0x73, 0xBD, 0x66, 0x39, 0x90,
            0xC0, 0xA4, 0x94, 0x94, 0x3E, 0x61, 0x9E, 0xEF, 0x89, 0x1E, 0x93, 0x13, 0xC1, 0xFA, 0xD9, 0xEE,
            0x5B, 0x27, 0x71, 0x16, 0xCD, 0xA2, 0xEF, 0x49, 0xCC, 0xD6, 0x1D, 0x24, 0xA6, 0x3B, 0x89, 0x94,
            0x58, 0x28, 0xD2, 0x83, 0x5B, 0x25, 0x8A, 0x5F, 0x25, 0xFE, 0xE3, 0x2D, 0xE8, 0x58, 0x5E, 0xBB,
            0x9B, 0xD5, 0xE8, 0x46, 0xA5, 0xDC, 0xDE, 0x8F, 0x97, 0x03, 0xF1, 0x16, 0x01, 0xFC, 0x2E, 0x3F,
            0x47, 0x5B, 0xAF, 0x71, 0x2E, 0x7F, 0x19, 0xCE, 0xE3, 0x7D, 0xE2, 0x49, 0x5E, 0x71, 0x0A, 0x57,
            0xE1, 0x98, 0xAC, 0xDD, 0x7F, 0xFD, 0x5D, 0xAE, 0xDC, 0x24, 0xC5, 0x30, 0x3B, 0x65, 0xC1, 0xD6,
            0xF4, 0x62, 0xA0, 0xEE, 0xBC, 0x86, 0x68, 0xB4, 0x05, 0x68, 0x1B, 0xDB, 0x5C, 0xA8, 0x25, 0x92,
            0x70, 0xC8, 0xA5, 0xF6, 0x1A, 0x55, 0xAD, 0xAE, 0x44, 0x2A, 0x4A, 0x77, 0xCA, 0x2D, 0x6B, 0xDD,
            0x47, 0x51, 0x95, 0x58, 0xFF, 0x75, 0xDD, 0x30, 0x81, 0x80, 0x1B, 0xDB, 0xC2, 0xA9, 0x29, 0xCE,
            0xA8, 0xD6, 0xD8, 0x08, 0xC1, 0x86, 0x1C, 0xEC, 0x0F, 0x63, 0x48, 0x38, 0x1B, 0xEB, 0x32, 0xE3,
            0xA0, 0xE6, 0x28, 0x5E, 0xF4, 0x0A, 0xA2, 0x2D, 0xF1, 0xB0, 0x61, 0xFC, 0xDD, 0x4C, 0x6B, 0x43,
            0xE8, 0x82, 0x04, 0xE8, 0xF3, 0x3D, 0x43, 0xF5, 0x6D, 0x4E, 0x8A, 0x45, 0xC9, 0x6A, 0x96, 0x1D,
            0x37, 0x93, 0x76, 0x53, 0x9E, 0x33, 0x0A, 0xAF, 0x08, 0x3E, 0x80, 0xFC, 0xE7, 0xC5, 0x17, 0x69,
            0xE7, 0x91, 0x55, 0x52, 0x4A, 0xA5, 0x51, 0x06, 0xA8, 0x3E, 0x82, 0x1D, 0xFF, 0x27, 0x14, 0xEE,
            0x26, 0x39, 0x55, 0xC0, 0x8F, 0xD7, 0xF2, 0x47, 0x14, 0x9A, 0x54, 0x5E, 0xAC, 0x9A, 0xC2, 0x93,
            0xC0, 0x96, 0x60, 0x44, 0x11, 0x08, 0xED, 0x22, 0x20, 0x44, 0x77, 0xB3, 0xFC, 0x78, 0xE5, 0xDA,
            0x0A, 0xC5, 0xA1, 0xBE, 0x64, 0x80, 0x25, 0x20, 0xA7, 0xFB, 0x3E, 0xDB, 0x26, 0x39, 0x99, 0x2A,
            0xEE, 0xA3, 0x36, 0x7B, 0xB6, 0x63, 0x24, 0xF6, 0xF6, 0x13, 0x0E, 0x83, 0x86, 0x1F, 0x3A, 0x0F
    };

    unsigned int counterVal = 0x1B080733, outerCounterVal = 0x7FFFFB0A;
    unsigned int aCoefficient = 0x35E79125, cCoefficient = 0x56596B10, innerStuff = 0x5D0B1C11;
    unsigned int lastInnerStuff = 0;
    uint16_t prngSeed, prngVal;

    prngSeed = 0x5D0B, prngVal = 0x001C;

    //outerCounterVal = 0x9d009a45;
    //innerStuff = 0x9d009a45;
    std::cout << "10 states:\n";
    std::cout << decHex(innerStuff,1) << "\n";
    for(int i = 0; i < 10; i++){
        innerStuff = (innerStuff*aCoefficient + cCoefficient);
        std::cout << decHex(innerStuff,1) << "\n";
    }
    std::cout << "-------------------------------------------------------------------------------\n";
    innerStuff = 0x5D0B1C11;


    unsigned int followingStuff;
    uint16_t followingSeed, followingVal;

    unsigned int tempSeed = ((innerStuff & 0xFFFF0000) >> 8)>>8, tempVal = (innerStuff & 0xFF00) >> 8;
    innerStuff = (innerStuff*aCoefficient + cCoefficient);
    unsigned int tempSeed2 =((innerStuff & 0xFFFF0000) >> 8)>>8, tempVal2 = (innerStuff & 0xFF00) >> 8;

    innerStuff = 0x5D0B1C11;
    int nice = 0, whichIteration = 0;
    unsigned int tempInnerStuff = 0;
    unsigned int whichSeed = 0;
    for(outerCounterVal = 0; outerCounterVal < 0x7FFFFB0A; outerCounterVal++){
        innerStuff = (innerStuff*aCoefficient + cCoefficient);
        followingStuff = innerStuff*aCoefficient + cCoefficient;
        prngSeed = ((innerStuff & 0xFFFF0000) >> 8)>>8;
        prngVal = (innerStuff & 0xFF00) >> 8;
        followingSeed = ((followingStuff & 0xFFFF0000) >> 8)>>8;
        followingVal = (followingStuff & 0xFF00) >> 8;

        if((tempSeed == prngSeed && tempVal == prngVal) && (tempSeed2 == followingSeed && tempVal2 == followingVal)){
            nice = 10;
            std::cout << "Repeat found? Iterations " << (outerCounterVal) << ". Displaying following values\n";
            whichIteration = (outerCounterVal);
        }
        if(nice == 10){
            std::cout << "Previous state: " << decHex(tempInnerStuff,1)<< "\n";
        }
        if(nice > 0){
            std::cout << decHex(innerStuff, 1) << " seed: " << decHex(prngSeed,1) << " val: " << decHex(prngVal & 0xFF,1) << "\n";
            --nice;
        }
        if(outerCounterVal == 0x7FFFFB09){
            std::cout << "Last state: " << decHex(innerStuff,1) << "\n";
            whichSeed = innerStuff;
        }
        tempInnerStuff = innerStuff;
    }
    std::cout << "-------------------------------------------------------------------------------\n";

    innerStuff = 0x5D0B1C11;
    unsigned int result = 0;
    for(int i = 0; i < whichIteration; i++){
        innerStuff = (innerStuff*aCoefficient + cCoefficient);
        if(innerStuff == whichSeed){
            std::cout << decHex(whichSeed,1) << " is at " << decHex(0x7FFFFB0A - i,1) << "\n";
            result = whichIteration - i;
        }
    }

    std::cout << "That is " << result << " iterations behind the pattern, but " << whichIteration - result << " into the pattern\n";
    std::cout << "-------------------------------------------------------------------------------\n";
    std::cout << "Sanity checking values...\n";
    std::cout << "Outer loop period: ";
    innerStuff = 0x5D0B1C11;
    for(int i = 0; i < whichIteration + 1; i++){
        innerStuff = (innerStuff*aCoefficient + cCoefficient);
    }
    if(innerStuff != 0x5D0B1C11){
        std::cout << " failed! Expected 5d0b1c11, got " << decHex(innerStuff,1) << "\n";
    } else {
        std::cout << " passed! The outer loop has a period of " << decHex(whichIteration+1,1) << "\n";
    }
    std::cout << "Mod result: ";
    innerStuff = 0x5D0B1C11;
    for(int i = 0; i < whichIteration - result + 1; i++){
        innerStuff = (innerStuff*aCoefficient + cCoefficient);
    }
    if(innerStuff != whichSeed){
        std::cout << " failed! Expected " << decHex(innerStuff,1) << ", got " << decHex(whichSeed,1) << "\n";
    } else {
        std::cout << " passed! Only " << result << " iterations need to be computed!\n";
    }
    std::cout << "-------------------------------------------------------------------------------\n";

    innerStuff = whichSeed;
    //std::cout << "Before step: " << decHex(innerStuff,1) << "\n";
    //innerStuff = (innerStuff*aCoefficient + cCoefficient);
    unsigned int whichByte = 0;
    std::cout << "Start at byte " << whichByte << "\n";
    std::cout << "Start at seed " << decHex(innerStuff, 1) << "\n";
    std::cout << "                      Press any key to begin decryption.\n";
    //  Forgive me for I have sinned
    getch();





    std::cout << "----------------------------DECRYPTION START-----------------------------------\n";
    unsigned int prev = 0;
    for(unsigned int iterations = 0; iterations < result; iterations++){
        whichByte = 0;
        if(iterations == result - 1 && innerStuff != 0x4922bfad){
            std::cout << "Invalid final state, " << decHex(innerStuff,1) << " previous: " << decHex(prev, 1) << "\n";
        }
        prngSeed = ((innerStuff & 0xFFFF0000) >> 8)>>8;
        prngVal = (innerStuff & 0xFF00) >> 8;
        for(counterVal = 0x1B080733 ; counterVal > 0; counterVal--) {
            prngVal = (((prngVal) / 2) * (prngSeed & 0xFF) + (prngSeed >> 8));
            encryptedMapData[whichByte] ^= (prngVal & 0xFF);
            whichByte = (whichByte + 1) % 0x200;
        }
        prev = innerStuff;
        innerStuff = (innerStuff*aCoefficient + cCoefficient);
        std::cout << "Completed " << iterations+1 << "/" << result<< "         [" << ((iterations+1) / (double)(result))*100.0 << "%] (used seed: " << decHex(prev,1) << ", next: " << decHex(innerStuff,1) << ")\n";
    }






    std::cout << "-------------------------------DECRYPTION END----------------------------------\n";

    std::cout << "Backup information: \n";
    std::cout << "inner: " << decHex(innerStuff,1) << "\n";
    std::cout << "prevInner: " << decHex(prev,1) << "\n";
    std::cout << "End inner prng seed: " << decHex(prngSeed, 4) << "\n";
    std::cout << "End prng value: " << decHex(prngVal, 4) << "\n";
    std::cout << "End inner counter value: " << decHex(counterVal, 8) << "\n";
    std::cout << "End outer counter value: " << decHex(outerCounterVal, 8) << "\n";
    std::cout << "Result array: \n";
    for(int i = 0; i < 0x200; i++){
        std::cout << decHex(encryptedMapData[i], 2) << ",";
    }
}

//  Ignore the size param, it was once used, now it remains unused but the function call rtemains the same to maintain comp.
std::string decHex(int num, unsigned int size){
    std::cout << std::hex << num << std::dec;
    return "";
}